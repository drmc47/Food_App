{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { GET_RECIPES, GET_INFO } from '../actions';\nconst initialState = {\n  recipe: [],\n  moreInfo: {},\n  currentID: undefined\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_RECIPES:\n      return { ...state,\n        recipe: action.payload\n      };\n\n    case GET_INFO:\n      return { ...state,\n        moreInfo: state.recipe.find(e => parseInt(e.id) === parseInt(action.payload)) // moreInfo: 5\n\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nexport default store;","map":{"version":3,"sources":["/Users/drmc47/Desktop/Proyecto/PI-Food/client/src/store/index.js"],"names":["createStore","applyMiddleware","thunk","GET_RECIPES","GET_INFO","initialState","recipe","moreInfo","currentID","undefined","reducer","state","action","type","payload","find","e","parseInt","id","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,YAAtC;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,QAAQ,EAAE,EAFO;AAGjBC,EAAAA,SAAS,EAAEC;AAHM,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AAEA,SAAKV,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHL,QAAAA,MAAM,EAAEM,MAAM,CAACE;AAFZ,OAAP;;AAKA,SAAKV,QAAL;AACA,aAAO,EACH,GAAGO,KADA;AAEHJ,QAAAA,QAAQ,EAAEI,KAAK,CAACL,MAAN,CAAaS,IAAb,CAAkBC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACE,EAAH,CAAR,KAAmBD,QAAQ,CAACL,MAAM,CAACE,OAAR,CAAlD,CAFP,CAIH;;AAJG,OAAP;;AAOJ;AACI,aAAOH,KAAP;AAjBJ;AAmBH,CApBD;;AAqBA,MAAMQ,KAAK,GAAGnB,WAAW,CAACU,OAAD,EAAUT,eAAe,CAACC,KAAD,CAAzB,CAAzB;AAEA,eAAeiB,KAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport { GET_RECIPES, GET_INFO } from '../actions'\nconst initialState = {\n    recipe: [],\n    moreInfo: {},\n    currentID: undefined\n    \n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n\n    case GET_RECIPES:\n        return {\n            ...state, \n            recipe: action.payload\n        }\n\n        case GET_INFO: \n        return {\n            ...state,\n            moreInfo: state.recipe.find(e => parseInt(e.id) === parseInt(action.payload))\n            \n            // moreInfo: 5\n        }\n\n    default:\n        return state\n    }\n}\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store;"]},"metadata":{},"sourceType":"module"}